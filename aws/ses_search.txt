<SES>
・イベント各種
　https://docs.aws.amazon.com/ja_jp/ses/latest/dg/event-publishing-retrieving-sns-contents.html


・ログの保管場所
結論S3、DynamoDBが良いのでは、
S3は低コスト、データのライフサイクル管理が容易、S3Athenaで分析が可能。
DynamoDBも小規模であれば低コスト、コンソールからログを確認できる

　S3 -> Athena
   DynamoDB -> Console or SDK

# ログ保管先の比較：コストと分析のしやすさ

| 保管先 | コスト面 | ログの分析のしやすさ |
|--------|----------|----------------------|
| Amazon S3 | 非常に低コスト。長期保存に最適。データ量に応じて料金が変動。 | 低〜中。Athenaなどの追加サービスを使用することで分析が可能。直接のクエリは難しい。 |
| Amazon DynamoDB | 中程度。読み書きの頻度と量に応じてコストが変動。小規模なら低コスト。 | 中。NoSQLクエリに適しているが、複雑な分析には向かない。リアルタイム分析に強い。 |
| Amazon RDS | 中〜高。インスタンスの種類とサイズによってコストが変動。 | 高。SQLを使用した柔軟な分析が可能。複雑なクエリや結合操作に適している。 |
| Amazon Elasticsearch Service | 高め。インスタンスのサイズと数に応じてコストが上昇。 | 非常に高。全文検索や複雑なクエリに強い。Kibanaを使用した視覚化も容易。 |
| Amazon Redshift | 高め。大規模データの場合はコスト効率が良くなる。 | 非常に高。大量データに対する複雑な分析やBIに最適。SQLベースの分析が可能。 |
| Amazon Timestream | 中程度。時系列データに特化しているため、適切なユースケースではコスト効率が良い。 | 高。時系列データの分析に特化。時間ベースのクエリや集計が容易。 |
   

・SESで指定できるターゲット
　CloudWatch
　EventBridge
   SNS
   Kinesis Data Fiirehose
   Pinpoint

結論、SNSが良いと考えている。大量データを扱うのであれば、KinesisFirehose.
即時性、コスト面、スケーラビリティ

それぞれのメリットデメリット
1. Amazon SNS: 長所:
* 設定が比較的簡単
* 複数のサブスクライバーに同時にイベントを配信可能
* Lambda関数やSQSキューなど、様々なAWSサービスと連携しやすい
短所:
* 大量のデータを処理する場合、スケーリングに注意が必要 
2. Amazon Kinesis Data Firehose: 長所:
* 大量のデータをリアルタイムで処理可能
* S3、Redshift、Elasticsearchなどに直接データを送信可能
* データの変換や処理をストリーミング中に行える
短所:
* SNSに比べて設定がやや複雑
* イベントの即時処理よりもバッチ処理に適している 
3. Amazon EventBridge: 長所:
* AWSサービス間の連携やサードパーティサービスとの統合が容易
* 複雑なイベントルーティングやフィルタリングが可能
* サーバーレスアーキテクチャとの相性が良い
短所:
* 単純なイベント処理の場合、オーバーヘッドが大きい可能性がある
SNSを選んだ主な理由：
1. 柔軟性：複数の処理方法（Lambda、SQS、HTTP/Sエンドポイントなど）を簡単に追加できる
2. 即時性：イベントをリアルタイムで処理できる
3. 簡易性：設定と管理が比較的簡単
ただし、以下の場合は他のオプションを検討する価値があります：
* 大量のデータを処理する必要がある場合 → Kinesis Data Firehose
* 複雑なイベントルーティングや他のAWSサービスとの高度な連携が必要な場合 → EventBridge


・SESからわたせる情報

・その他情報
すぐにログ機能を利用できる。
　　Amazon SESのVirtual Deliverability
　　デメリットは、検索できる範囲30日間、詳細ログは見れない。ここのアドレスのログは見れる。

・inspector タグ除外を無効化する方法
